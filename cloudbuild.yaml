steps:
  # ------ 1. Build & Push Backend ------
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Backend Image'
    args: 
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/backend:$COMMIT_SHA'
      - './backend'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Backend Image'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/backend:$COMMIT_SHA'

  # ------ 2. Iniciar Proxy y Ejecutar Migración de DB ------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Start Proxy and Run Migration'
    entrypoint: 'sh'
    args:
    - '-c'
    - |
      # 1. Instalar las herramientas necesarias: wget y postgresql-client
      apt-get update && apt-get install -y wget postgresql-client
      
      # 2. Descargar y hacer ejecutable el Cloud SQL Proxy
      wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.amd64 -O cloud-sql-proxy
      chmod +x cloud-sql-proxy

      # 3. Iniciar el proxy en segundo plano (&) usando un socket Unix.
      ./cloud-sql-proxy --private-ip --unix-socket /workspace/cloudsql ${PROJECT_ID}:${_REGION}:desafio-db-instance &
      
      # 4. Esperar unos segundos para asegurar que el socket del proxy esté listo.
      sleep 5
      
      # 5. Obtener la contraseña y ejecutar la migración.
      DB_SECRET_PASS=$$(gcloud secrets versions access latest --secret=db-password)
      PGPASSWORD=$$DB_SECRET_PASS psql -h /workspace/cloudsql -U app-user -d app-db -f backend/migrations/01-init.sql

  # ------ 3. Desplegar el Backend en Cloud Run ------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Backend'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'backend-service'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/backend:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--service-account=${_RUN_SA_EMAIL}'
      - '--add-cloudsql-instances=${PROJECT_ID}:${_REGION}:desafio-db-instance'
      - '--set-env-vars=DB_USER=app-user,DB_NAME=app-db'
      - '--set-secrets=DB_PASS=db-password:latest'

  # ------ 4. Build & Push Frontend ------
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Frontend Image'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/frontend:$COMMIT_SHA'
      - './frontend'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Frontend Image'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/frontend:$COMMIT_SHA'

  # ------ 5. Desplegar el Frontend en Cloud Run ------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Frontend'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'frontend-service'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/frontend:$COMMIT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--set-env-vars=_VITE_API_URL=${_VITE_API_URL}'

options:
  logging: CLOUD_LOGGING_ONLY